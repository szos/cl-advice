#+TITLE: CL-ADVICE

A lightweight and portable system for advising functions in Common Lisp.

* Description
  ~CL-ADVICE~ implements a new function type which carries with it slots for
  before, around, and after advice. Functions can be defined as advisable,
  existing functions not within a locked package can be converted to advisable
  functions, and advisable functions can be converted to regular functions.

** Types of Advice
   Pieces of advice are functions which get called before, after, or around the
   main function. Generally speaking, its a good idea to define advice functions
   as named functions and add it as a symbol and not a function object. This
   makes removing advice easier, and allows the advised function to use the new
   definition should the advice function be recompiled. Additionally, while
   installing anonymous functions as advice is allowed, removing anonymous
   function advice requires knowing where in the advice list it lies, or holding
   a reference to the anonymous function object.
*** Before and After Advice
    Before and After advice must have an argument list that is compatible with
    the main function. Two argument lists are considered compatible if they can
    both be applied to the same arguments. These advice functions are looped
    through and called in order.
*** Around Advice
    Around advice must take the next function to be called as its first
    argument, and all following arguments must be compatible with the main
    functions argument list. Around advice is unique in that it has control over
    whether or not the next function will be called. The next function may be
    the main function, or the next piece of around advice.
    
* Usage
  This system is used primarily through the functions ~make-advisable~,
  ~defun-advisable~, ~add-advice~, ~replace-advice~, and ~remove-advice~. For
  more information, see the docstrings of the functions and macros exported in
  =package.lisp=.

** Making Functions Advisable
   When making functions advisable, the original function object is wrapped in a
   funcallable object which has a dispatch function as its main function. This
   conversion is done through the function ~make-advisable~. By default,
   functions are converted to be advisable implicitly, through the function
   ~ensure-advisable-function~. This is controlled by the dynamic variable
   ~*allow-implicit-conversion*~, and can be enabled or disabled for a body of
   code through the macro ~with-implicit-conversion~. If conversion

*** ~MAKE-ADVISABLE~
    This function creates an advisable function object and, if the function to
    make advisable is a symbol, rebinds the symbol-function to this new
    function. In addition it defines a dispatcher function for the advisable
    function object. 
    
    When defining the dispatch function all care will be taken to preserve the
    original argument list, however this isnt guaranteed. The function
    ~make-advisable~ has a compiler macro defined for it which will define the
    dispatcher function with correct arguments if they are provided. However a
    compiler macro may not always be called. For this reason the argument
    ~force-use-arguments~ is provided which forces generation of a dispach
    function with the correct argument list by using ~eval~.
    
** Redefining functions
   The macro ~defun-advisable~ copies existing advice if and only if the
   function has the same argument list (as compared by ~equal~).

** Example: ~TRACE~
   We can implement ~trace~ in terms of ~:around~ advice like so:
#+BEGIN_SRC lisp
  (defpackage :tracer
    (:use :cl :cl-advice))

  (in-package :tracer)

  (defun make-simple-tracer (&optional (sym 'unknown-function))
    (let ((inc 0))
      (lambda (next-fn &rest args)
        (let ((string (make-string inc :initial-element #\space)))
          (format t "~&~A~A: Calling ~A with arguments ~A~%"
                  string inc sym args)
          (incf inc)
          (let ((result (apply next-fn args)))
            (decf inc)
            (format t "~&~A~A: ~A returned ~A~%"
                    string inc sym result)
            result)))))

  (defun-advisable fib (n)
    (if (< n 2)
        n
        (+ (fib (- n 1)) (fib (- n 2)))))

  (add-advice :around 'fib (make-simple-tracer 'fib))
#+END_SRC

   The result of this is that when ~fib~ is called, the following will be
   printed to standard output:
#+BEGIN_SRC lisp
  TRACER> (fib 1)
   0: Calling FIB with arguments (1)
   0: FIB returned 1
  1
  TRACER> (fib 5)
   0: Calling FIB with arguments (5)
    1: Calling FIB with arguments (4)
     2: Calling FIB with arguments (3)
      3: Calling FIB with arguments (2)
       4: Calling FIB with arguments (1)
       4: FIB returned 1
       4: Calling FIB with arguments (0)
       4: FIB returned 0
      3: FIB returned 1
      3: Calling FIB with arguments (1)
      3: FIB returned 1
     2: FIB returned 2
     2: Calling FIB with arguments (2)
      3: Calling FIB with arguments (1)
      3: FIB returned 1
      3: Calling FIB with arguments (0)
      3: FIB returned 0
     2: FIB returned 1
    1: FIB returned 3
    1: Calling FIB with arguments (3)
     2: Calling FIB with arguments (2)
      3: Calling FIB with arguments (1)
      3: FIB returned 1
      3: Calling FIB with arguments (0)
      3: FIB returned 0
     2: FIB returned 1
     2: Calling FIB with arguments (1)
     2: FIB returned 1
    1: FIB returned 2
   0: FIB returned 5
  5 (3 bits, #x5, #o5, #b101)
#+END_SRC
